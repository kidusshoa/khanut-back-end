# Password Reset Functionality Documentation

## Overview

The password reset functionality in Khanut allows users to securely reset their password if they've forgotten it. The system uses a token-based approach with email verification to ensure security.

## Flow

1. **Request Password Reset**
   - User enters their email address on the forgot password page
   - System generates a secure random token and stores it with the user record
   - System sends an email with a reset link containing the token and user ID
   - For security, the system always returns a success message even if the email doesn't exist

2. **Token Validation**
   - When user clicks the reset link, the frontend validates the token with the backend
   - System checks if the token exists and hasn't expired (tokens expire after 1 hour)
   - If valid, user is shown the password reset form
   - If invalid, user is shown an error message

3. **Password Reset**
   - User enters a new password
   - System verifies the token again
   - If valid, the password is updated and the token is cleared
   - User is redirected to the login page

## Security Features

1. **Rate Limiting**
   - Password reset requests are limited to 5 per hour per IP/email combination
   - This prevents brute force attacks and abuse of the email system

2. **Token Expiration**
   - Reset tokens expire after 1 hour
   - This limits the window of opportunity for attackers

3. **Email Obfuscation**
   - System doesn't reveal if an email exists in the database
   - Always returns the same success message regardless of email existence

4. **Secure Token Generation**
   - Uses crypto.randomBytes(32) to generate a cryptographically secure token
   - 32 bytes (256 bits) provides sufficient entropy to prevent guessing

5. **Comprehensive Logging**
   - All password reset attempts are logged with IP addresses
   - Failed attempts are logged with detailed error information
   - Successful resets are logged for audit purposes

## Email Service

The system uses Resend for sending password reset emails. The email includes:

1. A clear subject line indicating it's a password reset
2. Instructions for the user
3. A prominent reset button
4. The reset link as text (in case the button doesn't work)
5. Information about token expiration
6. Both HTML and plain text versions for compatibility

## User Experience Features

1. **Resend Option**
   - If a user doesn't receive the email, they can request it to be resent
   - A 60-second cooldown prevents abuse of the resend feature
   - Visual feedback shows when the email has been resent

2. **Clear Instructions**
   - Users are guided through each step of the process
   - Error messages are clear and actionable

3. **Mobile Responsive**
   - The interface works well on both desktop and mobile devices

## API Endpoints

1. **POST /api/auth/forgot-password**
   - Request a password reset email
   - Body: `{ "email": "user@example.com" }`
   - Response: `{ "message": "If an account with that email exists, a password reset link has been sent." }`

2. **POST /api/auth/validate-reset-token**
   - Validate a reset token
   - Body: `{ "token": "token_string", "userId": "user_id" }`
   - Response: `{ "valid": true }` or error message

3. **POST /api/auth/reset-password**
   - Reset password with a valid token
   - Body: `{ "token": "token_string", "userId": "user_id", "password": "new_password" }`
   - Response: `{ "message": "Password has been reset successfully" }` or error message

## Database Schema

The User model includes the following fields for password reset:

```
resetPasswordToken: String,
resetPasswordExpires: Date
```

These fields are set when a reset is requested and cleared when the password is reset.

## Troubleshooting

1. **Email Not Received**
   - Check spam/junk folders
   - Verify the email address is correct
   - Use the resend option after 60 seconds
   - Check server logs for email sending errors

2. **Invalid Token Error**
   - Token may have expired (after 1 hour)
   - Token may have already been used
   - URL may be incomplete or corrupted
   - Request a new reset link

3. **Rate Limit Exceeded**
   - Wait for the rate limit to reset (1 hour)
   - If urgent, contact support

## Maintenance

1. **Email Templates**
   - Email templates are defined in `src/utils/sendResetEmail.ts`
   - HTML and text versions should be kept in sync

2. **Token Expiration**
   - Token expiration time is set to 1 hour in `src/controllers/authController.ts`
   - This can be adjusted if needed

3. **Rate Limiting**
   - Rate limit settings are in `src/middleware/rateLimiter.ts`
   - Adjust as needed based on usage patterns and security requirements
